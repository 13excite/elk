ilter {
  if [type] == "prizma_middle" {
    grok {
            match => { "message" => "%{QUERY_MIDDL}" }
            add_tag => [ "video", "img" ]
        }
        if "_grokparsefailure" in [tags] {
            grok {
                match => { "message" => "%{DO_PROCESS_MIDDL}" }
                remove_tag => [ "_grokparsefailure" ]
                add_tag => [ "video", "img" ]
            }
        }
        if "_grokparsefailure" in [tags] {
            grok {
                match => { "message" => "%{MERGE_MIDDL}" }
                remove_tag => [ "_grokparsefailure" ]
                add_tag => [ "video", "img" ]
            }
        }
        if "_grokparsefailure" in [tags] {
            grok {
                match => { "message" => "%{ANSWER_MIDDL}" }
                remove_tag => [ "_grokparsefailure" ]
                add_tag => [ "video", "img" ]
            }
        }
        if "_grokparsefailure" in [tags] {
            grok {
                match => { "message" => "%{PROC_DO_MIDDLE}" }
                remove_tag => [ "_grokparsefailure" ]
                add_tag => [ "video", "img" ]
            }
        }
        if "_grokparsefailure" in [tags] {
            grok {
                match => { "message" => "%{AVSTREAM_MIDDLE}" }
                remove_tag => [ "_grokparsefailure" ]
                add_tag => [ "video", "img" ]
            }
        }
        if "_grokparsefailure" in [tags] {
            grok {
                match => { "message" => "%{WARN_MIDDL}" }
                remove_tag => [ "_grokparsefailure" ]
                add_tag => [ "video", "img" ]
            }
        }
        if "_grokparsefailure" in [tags] {
            grok {
                match => { "message" => "%{FULL_PRIZMA_LOG}" }
                remove_tag => [ "_grokparsefailure" ]
                add_tag => [ "log-not-found" ]
            }
        }
        mutate {
            convert => { "times_total" => "integer" }
                convert => { "times_queue" => "integer" }
                convert => { "times_worker" => "integer" }
                convert => { "boomerang" => "integer" }
                convert => { "answer_lenght" => "integer" }
                convert => { "elapsed" => "integer" }
                convert => { "data_len" => "integer" }
                convert => { "chunk_num" => "integer" }
        }
    }
}